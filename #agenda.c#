-/**********************************************************************
 *  This is a program that allow user to put their things in time 
 * It uses a list to represent the days and another list that represent the to-do-list. 
 * Tasks that are allowed:
 *  - Create calendar (Optional: create new user (ALPHA) )
 *  - Create a new task
 *  - Delete a task
 *  - Update a task
 *  - List all tasks in a day
 *  - List all completed/uncompleted tasks
 *
 ***********************************************************************/



#include <stdio.h>
#include <time.h>
#include "agenda.h"

/***********************************************************************
 *                            DATA DEFINITION                          *
 ***********************************************************************/


// Represent a calendar
struct{  
  Task *task; //AS HEAP???
  statistical_data sd;
}daag;


/***********************************************************************
 *                            IMPLEMENTATION                           *
 ***********************************************************************/


/* Function name: menu_option
   ---------------------------------------
   Function that prints a welcome message, the program version and the 
   available option that the user can use
 */
static void menu_options(){
  printf(WELCOME_MESSAGE);
  printf("What you want to do?\n");
  printf("\t1) Create a new calendar.");
  printf("\t2) Load a calendar from a file.");
  printf("\t3) Create a new task");
  printf("\t4) Delete a task.");
  printf("\t5) Update a task."); // This has a sub-menu

  printf("\t0) Exit.");
}


/* Function name: menu
   ---------------------------------------
   Function that manages what the user want'd to do by calling other functions 
   TODO: create functions to do the checks on the existence of the agenda (Too much duplicated code)
 */
void menu(){
  int choice;
  int agenda_defined = 0; // flag that state if an agenda was already defined
  int ans = 0;
  daily_agenda DA;

  
  menu_options(); 
  scanf("%d",&choice);
  while(1){
    switch(choice){
      // CREATE NEW CALENDAR
    case 1:
      if (agenda_defined == 1){ // Agenda already defined
        printf("\nOops, you are using another agenda. You can:\n [1] Reset this agenda and cerate a new one./n [0] Do nothing.\n >");
        scanf("%d",&ans);
	while(ans != 0 || ans != 1){
	  scanf("%*[^\n]s%*1c"); // clean the buffer from strings
	  printf("Please insert 1 to delete the current agenda or 0 to do nothing\n");
	  scanf("%d",&ans);
	}
	if(ans == 0){
	  printf("\nOkay, then I'll do nothing.\n");
	  break;
	}
      }
      // If all checks are done
      DA = agenda_init();
      printf("\nA new agenda has been created! \n");
      agenda_defined = 1;
      
      break;

      // LOAD CALENDAR FROM FILE
    case 2:
      if (agenda_defined == 1){ // Agenda already defined
        printf("\nOops, you are using another agenda. You can:\n [1] Reset this agenda and cerate a new one./n [0] Do nothing.\n >");
        scanf("%d",&ans);
	while(ans != 0 || ans != 1){
	  scanf("%*[^\n]s%*1c"); // clean the buffer
	  printf("Please insert 1 to delete the current agenda or 0 to do nothing\n");
	  scanf("%d",&ans);
	}

      }
      if(ans == 0){
	printf("\nOkay, then I'll do nothing.\n");
	break;
      }

      char file_name[MAX_FILE_NAME];
      FILE *fp;
      printf("\nInsert the file name>");
      scanf("%s",file_name);

      if ( ((fp = fopen(file_name,"r"))) == NULL){
	error_handler(ERROR_FILE_NOT_FOUND);
	break;
      }

      // Ready to read
      DA = agenda_init_from_file(fp);
      printf("\nA new agenda has been created! \n");
      agenda_defined = 1;
      break;



    // CREATE NEW TASK
    case 3:
      if (agenda_defined == 1){ // Agenda already defined
        printf("\nOops, seems that you are not using an agenda. You can:\n [1] Create a new agenda./n [0] Do nothing.\n >");
        scanf("%d",&ans);
	while(ans != 0 || ans != 1){
	  scanf("%*[^\n]s%*1c"); // clean the buffer
	  printf("Please insert 1 to create a new agenda or 0 to do nothing\n");
	  scanf("%d",&ans);
	}
      // Ugly code incoming
      if(ans == 1){
	printf("Do you want to load it from a local file? [1 = yes]");
	scanf("%d",&ans);
	while(ans != 0 || ans != 1){
	  scanf("%*[^\n]s%*1c"); // clean the buffer
	  printf("Please insert 1 to load from a file or 0 create a brand new agenda.\n");
	  scanf("%d",&ans);
	}
	if (ans == 1){
	  char file_name[MAX_FILE_NAME];
	  FILE *fp;
	  printf("\nInsert the file name>");
	  scanf("%s",file_name);

	  if ( ((fp = fopen(file_name,"r"))) == NULL){
	    error_handler(ERROR_FILE_NOT_FOUND);
	    break;
	  }
	  DA = agenda_init_from_file(fp);
	  printf("\nA new agenda has been created! \n");
	  agenda_defined = 1;
	}else{
	DA = agenda_init();
	printf("\nA new agenda has been created! \n");
	agenda_defined = 1;
	}

	// Now creation of the new task
	NEWtask(DA);
      }else{
	printf("\nOkay, then I'll do nothing.\n");
	break;
      }
   }
      // No problems. Create new task.
	NEWtask(DA);
      break;
      
      // DELETE TASK
    case 4:
      if (agenda_defined == 1){ // Agenda already defined
        printf("\nOops, seems that you are not using an agenda. You can:\n [1] Create a new agenda./n [0] Do nothing.\n >");
        scanf("%d",&ans);
	while(ans != 0 || ans != 1){
	  scanf("%*[^\n]s%*1c"); // clean the buffer
	  printf("Please insert 1 to create a new agenda or 0 to do nothing\n");
	  scanf("%d",&ans);
	}
      // Ugly code incoming
      if(ans == 1){
	printf("Do you want to load it from a local file? [1 = yes]");
	scanf("%d",&ans);
	while(ans != 0 || ans != 1){
	  scanf("%*[^\n]s%*1c"); // clean the buffer
	  printf("Please insert 1 to load from a file or 0 create a brand new agenda.\n");
	  scanf("%d",&ans);
	}
	if (ans == 1){
	  char file_name[MAX_FILE_NAME];
	  FILE *fp;
	  printf("\nInsert the file name>");
	  scanf("%s",file_name);

	  if ( ((fp = fopen(file_name,"r"))) == NULL){
	    error_handler(ERROR_FILE_NOT_FOUND);
	    break;
	  }
	  DA = agenda_init_from_file(fp);
	  printf("\nA new agenda has been created! \n");
	  agenda_defined = 1;
	}else{
	DA = agenda_init();
	printf("\nA new agenda has been created! \n");
	agenda_defined = 1;
	}	
	break; // No deletion because no agenda where defined previously 
      }else{
	printf("\nOkay, then I'll do nothing.\n");
	break;
      }
      }
      // No problems found. Delete task
      int id;
      do{
      printf("\nInsert the id of the task. [-1] to print a list of tasks.\n>");
      scanf("%d",&id);
      if (id == -1) print_tasks();
      }while(id == -1 || id < 0);
      
      if(DELtask(id) == 1)
	printf("\nTask deleted succesfully!\n");
      break;
      

      
    // UPDATE TASK
    case 5:
      if (agenda_defined == 1){ // Agenda already defined
        printf("\nOops, seems that you are not using an agenda. You can:\n [1] Create a new agenda./n [0] Do nothing.\n >");
        scanf("%d",&ans);
	while(ans != 0 || ans != 1){
	  scanf("%*[^\n]s%*1c"); // clean the buffer
	  printf("Please insert 1 to create a new agenda or 0 to do nothing\n");
	  scanf("%d",&ans);
	}
      // Ugly code incoming
      if(ans == 1){
	printf("Do you want to load it from a local file? [1 = yes]");
	scanf("%d",&ans);
	while(ans != 0 || ans != 1){
	  scanf("%*[^\n]s%*1c"); // clean the buffer
	  printf("Please insert 1 to load from a file or 0 create a brand new agenda.\n");
	  scanf("%d",&ans);
	}
	if (ans == 1){
	  char file_name[MAX_FILE_NAME];
	  FILE *fp;
	  printf("\nInsert the file name>");
	  scanf("%s",file_name);

	  if ( ((fp = fopen(file_name,"r"))) == NULL){
	    error_handler(ERROR_FILE_NOT_FOUND);
	    break;
	  }
	  DA = agenda_init_from_file(fp);
	  printf("\nA new agenda has been created! \n");
	  agenda_defined = 1;
	}else{
	DA = agenda_init();
	printf("\nA new agenda has been created! \n");
	agenda_defined = 1;
	}	
	break; // No update because no agenda where defined previously 
      }else{
	printf("\nOkay, then I'll do nothing.\n");
	break;
      }
      }
      // No problems found. Update task
      int id;
      do{
      printf("\nInsert the id of the task. [-1] to print a list of tasks.\n>");
      scanf("%d",&id);
      if (id == -1) print_tasks();
      }while(id == -1 || id < 0);
      
      if(UPDtask(id) == 1)
	printf("\nTask updated succesfully!\n");
      break;
      
      
      // Close the program with a closing message, includes the case (choice == 0)
    default:
      printf("Thank you for using this program. See you soon!");
      break;
    }
  }
}



/* Function name: 
   ---------------------------------------
   
 */
daily_agenda agenda_init(){
  daily_agenda AG = malloc(sizeof AG*);
  if(AG == NULL) error_handler(ERROR_ALLOCATION);
}



/* Function name: agenda_init_from_file
   ---------------------------------------
   This function read from a file an agenda previously saved (Self-made standard).
   Next implementaion: read agenda from Json file.
*/
agenda_init_from_file(fp){

}



/* Function name: 
   ---------------------------------------
   
 */
void error_handler(int e){
  switch(e){
  case ERROR_ALLOCATION:
    printf("Error 1000: unable to allocate memory.");
    break;
  default:
    printf("\nError: undefined.\n");
    break;
  }
}
